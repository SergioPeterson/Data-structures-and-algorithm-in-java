import java.util.Iterator;

public class LinkedListDeque<T> implements Deque<T>, Iterable<T> {


    private class Deque {
        private T item;
        private Deque prev;
        private Deque next;

        Deque(Deque p, T i, Deque n) {
            prev = p;
            item = i;
            next = n;
        }
    }

    private Deque sentinel;
    private int size;

    public LinkedListDeque() {
        sentinel = new Deque(null, null, null);
        sentinel.next = sentinel;
        sentinel.prev = sentinel;
        size = 0;
    }

    public void addFirst(T item) {
        sentinel.next = new Deque(sentinel, item, sentinel.next);
        if (size == 0) {
            sentinel.prev = sentinel.next;
        } else {
            sentinel.next.next.prev = sentinel.next;
        }
        size++;
    }

    public void addLast(T item) {
        sentinel.prev = new Deque(sentinel.prev, item, sentinel);
        if (size == 0) {
            sentinel.next = sentinel.prev;
        } else {
            sentinel.prev.prev.next = sentinel.prev;
        }
        size++;
    }


    public int size() {
        return size;
    }

    public void printDeque() {
        Deque pointer = sentinel;

        for (int i = 0; i < size; i++) {
            System.out.println(pointer.next.item);
            pointer = pointer.next;
        }
    }

    public T removeFirst() {
        if (size > 0) {
            T value = sentinel.next.item;
            sentinel.next = sentinel.next.next;
            sentinel.next.prev = sentinel;
            size--;
            return value;
        }
        return null;
    }

    public T removeLast() {
        if (size > 0) {
            T value = sentinel.prev.item;
            sentinel.prev = sentinel.prev.prev;
            sentinel.prev.next = sentinel;
            size--;
            return value;
        }
        return null;
    }

    public T get(int index) {
        if (index >= size) {
            return null;
        } else {
            Deque pointer = sentinel.next;
            for (int i = 0; i < index; i++) {
                pointer = pointer.next;
            }
            return pointer.item;
        }
    }

    private T helper(Deque pointer, int index) {
        if (index == 0) {
            return pointer.item;
        } else {
            return helper(pointer.next, index - 1);
        }
    }

    public T getRecursive(int index) {
        if (index == 0) {
            return sentinel.next.item;
        } else {
            return helper(sentinel.next, index);
        }
    }


    public Iterator<T> iterator() {
        return new LinkedListDequeIterator();
    }

    private class LinkedListDequeIterator implements Iterator<T> {
        private int pos;

        LinkedListDequeIterator() {
            pos = 0;
        }

        public boolean hasNext() {
            return pos < size;
        }

        public T next() {
            T returnItem = get(pos);
            pos++;
            return returnItem;
        }
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof deque.Deque) {
            if (((deque.Deque<?>) o).size() != size) {
                return false;
            } else {
                for (int i = 0; i < ((deque.Deque<?>) o).size(); i++) {
                    if (!(((deque.Deque<?>) o).get(i).equals(get(i)))) {
                        return false;
                    }
                }
                return true;
            }
        } else {
            return false;
        }


    }
}